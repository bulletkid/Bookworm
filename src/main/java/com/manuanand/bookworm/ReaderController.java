package com.manuanand.bookworm;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/reader") // This means URL's start with /reader (after Application path)
public class ReaderController {
	@Autowired // This means to get the bean called readerRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ReaderRepository readerRepository;

	///
	// Reader Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Reader addReader (
			@RequestParam String name, @RequestParam String email,
			@RequestParam String password) {

		Reader newReader = new Reader();
		newReader.setName(name);
		newReader.setEmail(email);
		newReader.setPassword(password);
		
		readerRepository.save(newReader);
		
		return newReader;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<Reader> getAllReaders() {
		
		// This returns a JSON or XML with the readers
		return readerRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Reader getSpecificReader(@PathVariable String id) {
		
		Integer readerId = null;
		try {
			readerId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Reader> reader = readerRepository.findById(readerId);
		if (!reader.isEmpty()) {
			return reader.get();
		} 

		return null;
	}
}