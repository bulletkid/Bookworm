package com.manuanand.bookworm;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/book") // This means URL's start with /book (after Application path)
public class BookController {
	@Autowired // This means to get the bean called bookRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private BookRepository bookRepository;
	
	@Autowired
	private AuthorRepository authorRepository;
	
	///
	// Book Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Book addBook (
			@RequestParam String title, @RequestParam String isbnNumber, 
			@RequestParam int authorId ) {
		
		// Validate author ID
		Optional<Author> author = authorRepository.findById(authorId);
		if (author.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Author with ID" + authorId + " not found");
		}

		Book newBook = new Book();
		newBook.setTitle(title);
		newBook.setAuthorId(authorId);
		newBook.setIsbnNumber(isbnNumber);
		
		bookRepository.save(newBook);
		
		return newBook;
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<Book> getAllBooks() {
		
		// This returns a JSON or XML with the users
		return bookRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Book getSpecificBook(@PathVariable String id) {
		
		Integer bookId = null;
		try {
			bookId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Book> book = bookRepository.findById(bookId);
		if (!book.isEmpty()) {
			return book.get();
		} 

		return null;
	}

	@GetMapping(path="/deleteAll")
	public @ResponseBody void deleteAllBooks() {
		
		// This returns a JSON or XML with the users
		bookRepository.deleteAll();
	}
}